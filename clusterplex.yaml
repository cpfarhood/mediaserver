## ConfigMaps
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: clusterplex-pms-config
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-pms-config
    app.kubernetes.io/part-of: clusterplex
data:
  VERSION: docker
  TZ: America/Detroit
  PGID: '8675309'
  PUID: '8675309'
  #PLEX_CLAIM: 'claim-someclaimtoken'
  DOCKER_MODS: 'ghcr.io/pabloromeo/clusterplex_dockermod:latest'
  ORCHESTRATOR_URL: 'http://clusterplex-orchestrator:3500'
  PMS_SERVICE: "clusterplex-pms"
  PMS_PORT: "32400"
  FORCE_HTTPS: '1'
  TRANSCODER_VERBOSE: '1'
  TRANSCODE_OPERATING_MODE: remote
  LOCAL_RELAY_ENABLED: '1'
  LOCAL_RELAY_PORT: "32499"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: clusterplex-orchestrator-config
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-orchestrator-config
    app.kubernetes.io/part-of: clusterplex
data:
  TZ: America/Detroit
  LISTENING_PORT: '3500'
  WORKER_SELECTION_STRATEGY: LOAD_RANK
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: clusterplex-worker-config
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-worker-config
    app.kubernetes.io/part-of: clusterplex
data:
  TZ: America/Detroit
  PGID: '8675309'
  PUID: '8675309'
  VERSION: docker
  DOCKER_MODS: 'ghcr.io/pabloromeo/clusterplex_worker_dockermod:latest'
  ORCHESTRATOR_URL: 'http://clusterplex-orchestrator:3500'
  LISTENING_PORT: '3501'
  STAT_CPU_INTERVAL: '10000'
  EAE_SUPPORT: '1'
  FFMPEG_HWACCEL: 'vaapi'


## Volumes
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clusterplex-config
  namespace: mediaserver
  labels:
    kustomize.toolkit.fluxcd.io/prune: disabled
spec:
  storageClassName: longhorn-perpetual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clusterplex-cache
  namespace: mediaserver
  labels:
    kustomize.toolkit.fluxcd.io/prune: disabled
    app.kubernetes.io/name: clusterplex-cache
    app.kubernetes.io/part-of: clusterplex
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 64Gi
  storageClassName: longhorn-perpetual
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clusterplex-drivers
  namespace: mediaserver
  labels:
    kustomize.toolkit.fluxcd.io/prune: disabled
    app.kubernetes.io/name: clusterplex-drivers
    app.kubernetes.io/part-of: clusterplex
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 8Gi
  storageClassName: longhorn-perpetual

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clusterplex-transcode
  namespace: mediaserver
  labels:
    kustomize.toolkit.fluxcd.io/prune: disabled
spec:
  storageClassName: longhorn-perpetual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: clusterplex-media
  labels:
    kustomize.toolkit.fluxcd.io/prune: enabled
spec:
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  nfs:
    path: /mnt/pool0/media     # The path to your media
    server: spielberg.farhoodliquor.dmz     # Your NFS server with Media
  mountOptions:
    - soft
    - vers=4
    - minorversion=1
    - soft
    - noac
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clusterplex-media-pvc
  namespace: mediaserver
  labels:
    kustomize.toolkit.fluxcd.io/prune: disabled
spec:
  volumeName: clusterplex-media
  storageClassName: "nfs"
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi


## StatefulSet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clusterplex-pms
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-pms
    app.kubernetes.io/part-of: clusterplex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: clusterplex-pms
      app.kubernetes.io/part-of: clusterplex
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clusterplex-pms
        app.kubernetes.io/part-of: clusterplex
    spec:
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
      affinity:
        # Separate PMS from Workers
        #podAntiAffinity:
        #  preferredDuringSchedulingIgnoredDuringExecution:
        #  - podAffinityTerm:
        #      labelSelector:
        #        matchLabels:
        #          name: clusterplex-worker
        #      topologyKey: kubernetes.io/hostname
        #    weight: 50
        #  - podAffinityTerm:
        #      labelSelector:
        #        matchLabels:
        #          name: clusterplex-pms
        #      topologyKey: kubernetes.io/hostname
        #    weight: 100
      containers:
      - name: plex
        image: lscr.io/linuxserver/plex:latest
        startupProbe:
          httpGet:
            path: /identity
            scheme: HTTPS
            port: 32400
          failureThreshold: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /identity
            scheme: HTTPS
            port: 32400
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /identity
            scheme: HTTPS
            port: 32400
          initialDelaySeconds: 10
          timeoutSeconds: 10
        ports:
          - name: pms
            containerPort: 32400
          - name: relay
            containerPort: 32499
        envFrom:
        - configMapRef:
            name: clusterplex-pms-config
        volumeMounts:
        - name: media
          mountPath: /media
        - name: config
          mountPath: /config
        - name: cache
          mountPath: /config/Library/Application Support/Plex Media Server/Cache
        - name: drivers
          mountPath: /config/Library/Application Support/Plex Media Server/Drivers
        - name: transcode
          mountPath: /transcode
        resources:          # adapt requests and limits to your needs
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            gpu.intel.com/i915: 1
      volumes:
      - name: media
        persistentVolumeClaim:
          claimName: "clusterplex-media-pvc"
      - name: config
        persistentVolumeClaim:
          claimName: "clusterplex-config"
      - name: cache
        persistentVolumeClaim:
          claimName: "clusterplex-cache"
      - name: drivers
        persistentVolumeClaim:
          claimName: "clusterplex-drivers"
      - name: transcode
        persistentVolumeClaim:
          claimName: "clusterplex-transcode"


## Service
---
apiVersion: v1
kind: Service
metadata:
  name: clusterplex-pms
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-pms
    app.kubernetes.io/part-of: clusterplex
  annotations:
    metallb.universe.tf/loadBalancerIPs: 65.43.40.98
    external-dns.alpha.kubernetes.io/hostname: blockbuster.mediaserver.farhoodliquor.com
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: pms
      port: 443
      protocol: TCP
      targetPort: pms
    - name: relay
      port: 32499
      protocol: TCP
      targetPort: relay
  selector:
    app.kubernetes.io/name: clusterplex-pms
    app.kubernetes.io/part-of: clusterplex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clusterplex-orchestrator
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-orchestrator
    app.kubernetes.io/part-of: clusterplex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: clusterplex-orchestrator
      app.kubernetes.io/part-of: clusterplex
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clusterplex-orchestrator
        app.kubernetes.io/part-of: clusterplex
    spec:
      containers:
      - name: plex
        image: ghcr.io/pabloromeo/clusterplex_orchestrator:latest
        startupProbe:
          httpGet:
            path: /health
            port: 3500
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3500
          initialDelaySeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3500
          initialDelaySeconds: 5
          timeoutSeconds: 10
        ports:
          - name: orchestrator
            containerPort: 3500
        envFrom:
        - configMapRef:
            name: clusterplex-orchestrator-config
        resources:            # adapt requests and limits to your needs
          requests:
            cpu: 200m
            memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  name: clusterplex-orchestrator
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-orchestrator
    app.kubernetes.io/part-of: clusterplex
spec:
  type: ClusterIP
  ports:
    - name: orchestrator
      port: 3500
      protocol: TCP
      targetPort: orchestrator
  selector:
    app.kubernetes.io/name: clusterplex-orchestrator
    app.kubernetes.io/part-of: clusterplex
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clusterplex-worker
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: clusterplex-worker
    app.kubernetes.io/part-of: clusterplex
spec:
  serviceName: clusterplex-worker-service
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: clusterplex-worker
      app.kubernetes.io/part-of: clusterplex
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clusterplex-worker
        app.kubernetes.io/part-of: clusterplex
    spec:
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # Separate Workers from one another
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  name: clusterplex-worker
              topologyKey: kubernetes.io/hostname
            weight: 100
          # Separate Workers from PMS
          #- podAffinityTerm:
          #    labelSelector:
          #      matchLabels:
          #        name: clusterplex-pms
          #    topologyKey: kubernetes.io/hostname
          #  weight: 50
      containers:
      - name: plex-worker
        image: lscr.io/linuxserver/plex:latest
        startupProbe:
          httpGet:
            path: /health
            port: 3501
          failureThreshold: 40
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3501
          initialDelaySeconds: 60
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3501
          initialDelaySeconds: 10
          timeoutSeconds: 10
        ports:
          - name: worker
            containerPort: 3501
        envFrom:
        - configMapRef:
            name: clusterplex-worker-config
        volumeMounts:
        - name: media
          mountPath: /media
        - name: codecs
          mountPath: /codecs
        - name: cache
          mountPath: /config/Library/Application Support/Plex Media Server/Cache
        - name: drivers
          mountPath: /config/Library/Application Support/Plex Media Server/Drivers
        - name: transcode
          mountPath: /transcode
        resources:              # adapt requests and limits to your needs
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            gpu.intel.com/i915: 1               
          #  cpu: 100m
          #  memory: 128Mi
      volumes:
      - name: media
        persistentVolumeClaim:
          claimName: "clusterplex-media-pvc"
      - name: cache
        persistentVolumeClaim:
          claimName: "clusterplex-cache"
      - name: drivers
        persistentVolumeClaim:
          claimName: "clusterplex-drivers"
      - name: transcode
        persistentVolumeClaim:
          claimName: "clusterplex-transcode"
  volumeClaimTemplates:
    - metadata:
        name: codecs
        labels:
          app.kubernetes.io/name: clusterplex-codecs-pvc
          app.kubernetes.io/part-of: clusterplex
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        # specify your storage class
        storageClassName: longhorn-ephemeral