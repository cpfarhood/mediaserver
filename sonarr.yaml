## Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr
  namespace: mediaserver
spec:
  ingressClassName: traefik-internal
  rules:
  - host: sonarr.mediaserver.k8s
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name:  sonarr
            port:
              number: 8989
              
              
## Service
---
apiVersion: v1
kind: Service
metadata:
   name: sonarr
   namespace: mediaserver
   labels:
     app.kubernetes.io/name: sonarr
spec:
  type: ClusterIP
  #clusterIP: None
  ports:
  - port: 8989
  selector:
    app.kubernetes.io/name: sonarr


## StatefulSet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sonarr
  namespace: mediaserver
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarr
  serviceName: "sonarr"
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarr
    spec:
      containers:
      - name: sonarr
        image: lscr.io/linuxserver/sonarr:latest
        ports:
        - containerPort: 8989
          name: http-8989
        volumeMounts:
        - name: config
          mountPath: "/config"
        - name: library
          mountPath: /media/library
        - name: remote
          mountPath: "/media/remote"
        - name: shows
          mountPath: "/media/local/shows"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: sonarr-config
      - name: library
        persistentVolumeClaim:
          claimName: mediaserver-library
      - name: shows
        persistentVolumeClaim:
          claimName: mediaserver-shows
      - name: remote
        persistentVolumeClaim:
          claimName: mediaserver-remote
  volumeClaimTemplates:
  - metadata:
      name: config
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 4Gi

