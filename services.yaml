### SABnzbd
--- # loadbalancer
apiVersion: v1
kind: Service
metadata:
   name: sabnzbd
   annotations:
     external-dns.alpha.kubernetes.io/hostname: sabnzbd.farhoodliquor.dmz.
   labels:
     app: sabnzbd
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    name: http-8080
  selector:
    app: sabnzbd
--- # service
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sabnzbd 
spec:
  selector:
    matchLabels:
      app: sabnzbd
  serviceName: "sabnzbd"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: sabnzbd
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: sabnzbd
        image: lscr.io/linuxserver/sabnzbd:latest
        ports:
        - containerPort: 8080
          name: http-8080
        volumeMounts:
        - name: sabnzbd-config
          mountPath: "/config"
        - name: sabnzbd-downloads
          mountPath: "/downloads"
        - name: sabnzbd-incomplete
          mountPath: "/incomplete-downloads"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: sabnzbd-config
        persistentVolumeClaim:
          claimName: sabnzbd-config
      - name: sabnzbd-incomplete
        persistentVolumeClaim:
          claimName: sabnzbd-incomplete 
  volumeClaimTemplates:
  - metadata:
      name: sabnzbd-downloads
    spec:
      volumeName: sabnzbd-downloads
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
### End SABnzbd

### Sonarr
--- # loadbalancer
apiVersion: v1
kind: Service
metadata:
   name: sonarr
   annotations:
     external-dns.alpha.kubernetes.io/hostname: sonarr.farhoodliquor.dmz.
   labels:
     app: sonarr
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8989
    name: http-8989
  selector:
    app: sonarr
--- # service
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sonarr
spec:
  selector:
    matchLabels:
      app: sonarr
  serviceName: "sonarr"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: sonarr
        image: lscr.io/linuxserver/sonarr:latest
        ports:
        - containerPort: 8989
          name: http-8989
        volumeMounts:
        - name: sonarr-config
          mountPath: "/config"
        - name: sonarr-downloads
          mountPath: "/downloads"
        - name: sonarr-content
          mountPath: "/media"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: sonarr-config
        persistentVolumeClaim:
          claimName: sonarr-config
  volumeClaimTemplates:
  - metadata:
      name: sonarr-downloads
    spec:
      volumeName: sonarr-downloads
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: sonarr-content
    spec:
      volumeName: sonarr-content
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
### End sonarr

### Radarr
--- # loadbalancer
apiVersion: v1
kind: Service
metadata:
   name: radarr
   annotations:
     external-dns.alpha.kubernetes.io/hostname: radarr.farhoodliquor.dmz.
   labels:
     app: radarr
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 7878
    name: http-7878
  selector:
    app: radarr
--- # service
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: radarr
spec:
  selector:
    matchLabels:
      app: radarr
  serviceName: "radarr"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: radarr
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: sonarr
        image: lscr.io/linuxserver/radarr:latest
        ports:
        - containerPort: 7878
          name: http-7878
        volumeMounts:
        - name: radarr-config
          mountPath: "/config"
        - name: radarr-downloads
          mountPath: "/downloads"
        - name: radarr-content
          mountPath: "/media"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: radarr-config
        persistentVolumeClaim:
          claimName: radarr-config
  volumeClaimTemplates:
  - metadata:
      name: radarr-downloads
    spec:
      volumeName: radarr-downloads
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: radarr-content
    spec:
      volumeName: radarr-content
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
### End radarr

### Plex
--- # loadbalancer
apiVersion: v1
kind: Service
metadata:
   name: plex
   annotations:
     metallb.universe.tf/loadBalancerIPs: 65.43.40.99
     external-dns.alpha.kubernetes.io/hostname: plex.farhoodliquor.com.
   labels:
     app: plex
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 32400
    name: http
  - port: 443
    targetPort: 32400
    name: https
  selector:
    app: plex
--- # service
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: plex
spec:
  selector:
    matchLabels:
      app: plex
  serviceName: "plex"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: plex
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: plex
        image: lscr.io/linuxserver/plex:latest
        ports:
        - containerPort: 32400
          name: http-32400
        env:
        - name: TZ
          value: America/Detroit
        - name: VERSION
          value: docker
        - name: PLEX_CLAIM
          value: claim-rL81wxg-2Rhx2QvZ7mQs #optional
        volumeMounts:
        - name: plex-config
          mountPath: "/config"
        - name: plex-cert
          mountPath: "/certificate"
        - name: plex-content
          mountPath: "/media"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: plex-config
        persistentVolumeClaim:
          claimName: plex-config
      - name: plex-cert
        secret:
          secretName: farhoodliquor-com-cert-letsencrypt-prod
  volumeClaimTemplates:
  - metadata:
      name: plex-content
    spec:
      volumeName: plex-content
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
### End Plex

### Jellyfin
--- # loadbalancer
apiVersion: v1
kind: Service
metadata:
   name: jellyfin
   annotations:
     metallb.universe.tf/loadBalancerIPs: 65.43.40.98
     external-dns.alpha.kubernetes.io/hostname: streaming.farhoodliquor.com.
   labels:
     app: jellyfin
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8096
    name: http
  - port: 443
    targetPort: 8920
    name: https
  selector:
    app: jellyfin
--- # service
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jellyfin
spec:
  selector:
    matchLabels:
      app: jellyfin
  serviceName: "jellyfin"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: jellyfin
        image: lscr.io/linuxserver/jellyfin:latest
        ports:
        - containerPort: 8096
          name: http-8096
        - containerPort: 8920
          name: https-8920
        env:
        - name: TZ
          value: America/Detroit
        - name: JELLYFIN_PublishedServerUrl
          value: 65.43.40.98 #optional
        volumeMounts:
        - name: jellyfin-config
          mountPath: "/config"
        - name: jellyfin-cert
          mountPath: "/certificate"
        - name: jellyfin-content
          mountPath: "/media"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: jellyfin-config
        persistentVolumeClaim:
          claimName: jellyfin-config
      - name: jellyfin-cert
        secret:
          secretName: farhoodliquor-com-cert-letsencrypt-prod
  volumeClaimTemplates:
  - metadata:
      name: jellyfin-content
    spec:
      volumeName: jellyfin-content
      accessModes: ["ReadWriteMany"]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 1Gi
### End Jellyfin