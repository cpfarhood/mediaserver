## Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lidarr
spec:
  ingressClassName: traefik-internal
  rules:
  - host: lidarr.mediaserver.k8s
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name:  lidarr
            port:
              number: 8181
              
              
## Service
---
apiVersion: v1
kind: Service
metadata:
  name: lidarr
  namespace: mediaserver
  labels:
    app.kubernetes.io/name: lidarr
spec:
  clusterIP: None
  ports:
  - port: 8181
  selector:
    app.kubernetes.io/name: lidarr


## Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr
  namespace: mediaserver
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: lidarr
  serviceName: "lidarr"
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lidarr
    spec:
      containers:
      - name: lidarr
        image: lscr.io/linuxserver/lidarr:latest
        ports:
        - containerPort: 8181
          name: http-8181
        volumeMounts:
        - name: lidarr-config
          mountPath: "/config"
        - name: downloads
          mountPath: "/downloads/complete"
        - name: media
          mountPath: "/media"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: lidarr-config
        persistentVolumeClaim:
          claimName: lidarr-config
      - name: downloads
        nfs:
          path: /mnt/pool0/downloads
          server: spielberg.dmz.farh.net
      - name: media
        nfs:
          path: /mnt/pool0/media
          server: spielberg.dmz.farh.net


---
## Volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lidarr-config
  namespace: mediaserver
  labels:
    name: lidarr-config
  annotations:
    kustomize.toolkit.fluxcd.io/prune: disabled
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 8Gi
