## Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: riven
  namespace: mediaserver
spec:
  ingressClassName: traefik-internal
  rules:
    - host: riven.mediaserver.k8s
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: riven-frontend
                port:
                  number: 3000

## Services
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: riven-db
  name: riven-db
  namespace: mediaserver
spec:
  ports:
    - name: "riven-db"
      port: 5432
      targetPort: 5432
  selector:
    app: riven-db
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: riven
  name: riven
  namespace: mediaserver
spec:
  ports:
    - name: "riven"
      port: 8080
      targetPort: 8080
  selector:
    app: riven
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: riven-frontend
  name: riven-frontend
  namespace: mediaserver
spec:
  ports:
    - name: "riven-frontend"
      port: 3000
      targetPort: 3000
  selector:
    app: riven-frontend

## StatefulSets
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: riven-db
  name: riven-db
  namespace: mediaserver
spec:
  selector:
    matchLabels:
      app: riven-db
  template:
    metadata:
      labels:
        app: riven-db
    spec:
      containers:
        - name: riven-db
          image: postgres:17.0
          ports:
            - containerPort: 5432
              protocol: TCP
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_DB
              value: riven
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_SHARED_BUFFERS
              value: "512MB"                # 25% of 2GB
            - name: POSTGRES_WORK_MEM
              value: "4MB"                  # Low per-connection memory
            - name: POSTGRES_MAINTENANCE_WORK_MEM
              value: "128MB"                # Maintenance tasks like VACUUM
            - name: POSTGRES_MAX_CONNECTIONS
              value: "50"                   # Limited connections to prevent memory overuse
            - name: POSTGRES_EFFECTIVE_CACHE_SIZE
              value: "1.5GB"                # Around 75% of total memory
          livenessProbe:
            exec:
              command:
                - pg_isready
                - "-U"
                - postgres
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: data
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
      restartPolicy: Always
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: riven
  name: riven
  namespace: mediaserver
spec:
  selector:
    matchLabels:
      app: riven
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: riven
    spec:
      containers:
        - name: riven
          env:
            - name: PGID
              value: "911"
            - name: PUID
              value: "911"
            - name: RIVEN_DATABASE_HOST
              value: postgresql+psycopg2://postgres:postgres@riven-db/riven
            - name: RIVEN_FORCE_ENV
              value: "true"
            - name: TZ
              value: America/Detroit
          image: spoked/riven:latest
          readinessProbe:
            httpGet:
              path: /
              port: backend-http
#            exec:
#              command:
#                - sh
#                - -c
#                - "curl -s http://localhost:8080 >/dev/null || exit 1"
            periodSeconds: 30
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: backend-http
#            exec:
#              command:
#                - sh
#                - -c
#                - "curl -s http://localhost:8080 >/dev/null || exit 1"
            failureThreshold: 10
            periodSeconds: 30
            timeoutSeconds: 10
          resources:
            requests:
              memory: "1Gi"
              cpu: "1000m"
            limits:
              memory: "4Gi"
              cpu: "4000m"
          ports:
            - name: backend-http
              containerPort: 8080
          volumeMounts:
            - mountPath: /riven/data
              name: config
            - mountPath: /media/remote
              name: remote
            - mountPath: /media/local
              name: local
      restartPolicy: Always
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: riven-config
        - name: remote
          persistentVolumeClaim:
            claimName: mediaserver-remote
        - name: local
          nfs:
            path: /mnt/pool0/media
            server: truenas.farhoodliquor.dmz

## Deployments
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: riven-frontend
  name: riven-frontend
  namespace: mediaserver
spec:
  replicas: 2
  selector:
    matchLabels:
      app: riven-frontend
  template:
    metadata:
      labels:
        app: riven-frontend
    spec:
      restartPolicy: Always
      containers:
        - name: riven-frontend
          image: spoked/riven-frontend:latest
          env:
            - name: BACKEND_URL
              value: http://riven:8080
            - name: DATABASE_URL
              value: postgres://postgres:postgres@riven-db/riven
            - name: DIALECT
              value: postgres
            - name: ORIGIN
              value: http://riven.mediaserver.k8s
            - name: PGID
              value: "1000"
            - name: PUID
              value: "1000"
            - name: TZ
              value: America/Detroit
          ports:
            - name: frontend-http
              containerPort: 3000
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "2Gi"
              cpu: "2000m"
          readinessProbe:
            httpGet:
              path: /
              port: frontend-http
          livenessProbe:
            httpGet:
              path: /
              port: frontend-http
              failureThreshold: 5
---